#!/bin/bash

###########################
# wine runtime selection #
###########################

if [ -d $SNAP/wine-runtime ]; then
  WPR=$SNAP/wine-runtime
  if [ ! -f $WPR/bin/wprfile ]; then
    runtime_snap_name="$(
        grep \
            --extended-regexp \
            'default-provider: *wine-platform-runtime' \
            $SNAP/meta/snap.yaml \
            | cut --delimiter=: --fields=2 \
            | sed 's/^ *//' \
            || true
    )"

    if test -n "${runtime_snap_name}"; then
        echo "You need to connect this snap to the wine runtime snap."
        echo ""
        echo "You can do this with those commands:"
        echo "snap install ${runtime_snap_name}"
        echo "snap connect $SNAP_NAME:$(echo $runtime_snap_name | sed 's|-platform||g') ${runtime_snap_name}"
        echo ""
        exit 1
    fi
  fi
fi

###########################
# WINE platform selection #
###########################

if [ -d $SNAP/wine-platform ]; then
  WP=$SNAP/wine-platform
  REL="$(
      grep \
            --extended-regexp \
            'default-provider: *wine-platform-[[:digit:]]' \
            $SNAP/meta/snap.yaml \
            | cut --delimiter=: --fields=2 \
            | sed 's/^ *//;s|-| |g' \
            | awk '{print $4}'
  )"

  if [ ! -d $WP/wine-$REL ]; then
    platform_snap_name="$(
        grep \
            --extended-regexp \
            'default-provider: *wine-platform-[[:digit:]]' \
            $SNAP/meta/snap.yaml \
            | cut --delimiter=: --fields=2 \
            | sed 's/^ *//' \
            || true
    )"

    if test -n "${platform_snap_name}"; then
        echo "You need to connect this snap to the wine platform snap."
        echo ""
        echo "You can do this with those commands:"
        echo "snap install ${platform_snap_name}"
        echo "snap connect $SNAP_NAME:$(echo $platform_snap_name | sed 's|-platform||g') ${platform_snap_name}"
        echo ""
        exit 1
    fi
  fi
fi

# wine base
WINE_BASE=$WP/wine-$REL

TITLE="League of Legends"
NOTICE="The ${TITLE} snap is experimental, built
with development releases of upstream WINE and may not function as expected.\n\nIf you encounter issues please report them on the
${TITLE} snap issue tracker:
\n\nhttps://github.com/mmtrt/leagueoflegends/issues"

needs_update=true

. $SNAP_USER_DATA/.last_revision 2>/dev/null || true
if [ "$SNAP_DESKTOP_LAST_REVISION" = "$SNAP_REVISION" ]; then
  needs_update=false
fi

# Set $REALHOME to the users real home directory
REALHOME=`getent passwd $UID | cut -d ':' -f 6`

# async
declare -A PIDS

function async_exec() {
  $@ &
  PIDS[$!]=$@
}

function wait_for_async_execs() {
  for i in ${!PIDS[@]}
  do
    wait $i && continue || echo "ERROR: ${PIDS[$i]} exited abnormally with status $?"
  done
}

function install_app() {
  # Install additional requirements via winetricks here
  if [ -n "${TRICKS}" ]; then
    for TRICK in ${TRICKS}; do
      env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINETRICKS}" --unattended -f ${TRICK}
    done
  fi

function install_na() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_NA}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_NA}" -O "${TMPDIR}/${INSTALL_EXE_NA}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_NA}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_NA}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_NA}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_euw() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_EUW}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_EUW}" -O "${TMPDIR}/${INSTALL_EXE_EUW}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_EUW}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_EUW}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_EUW}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_eune() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_EUNE}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_EUNE}" -O "${TMPDIR}/${INSTALL_EXE_EUNE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_EUNE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_EUNE}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_EUNE}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_br() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_BR}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_BR}" -O "${TMPDIR}/${INSTALL_EXE_BR}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_BR}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_BR}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_BR}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_jp() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_JP}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_JP}" -O "${TMPDIR}/${INSTALL_EXE_JP}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_JP}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_JP}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_JP}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_kr() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_KR}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_KR}" -O "${TMPDIR}/${INSTALL_EXE_KR}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_KR}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_KR}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_KR}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_lan() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_LAN}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_LAN}" -O "${TMPDIR}/${INSTALL_EXE_LAN}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_LAN}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_LAN}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_LAN}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_las() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_LAS}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_LAS}" -O "${TMPDIR}/${INSTALL_EXE_LAS}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_LAS}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_LAS}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_LAS}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_oce() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_OCE}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_OCE}" -O "${TMPDIR}/${INSTALL_EXE_OCE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_OCE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_OCE}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_OCE}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_ph() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_PH}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_PH}" -O "${TMPDIR}/${INSTALL_EXE_PH}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_PH}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_PH}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_PH}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_ru() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_RU}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_RU}" -O "${TMPDIR}/${INSTALL_EXE_RU}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_RU}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_RU}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_RU}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_sg() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_SG}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_SG}" -O "${TMPDIR}/${INSTALL_EXE_SG}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_SG}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_SG}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_SG}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_tr() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_TR}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_TR}" -O "${TMPDIR}/${INSTALL_EXE_TR}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_TR}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_TR}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_TR}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_tw() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_TW}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_TW}" -O "${TMPDIR}/${INSTALL_EXE_TW}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_TW}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_TW}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_TW}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_vn() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_VN}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_VN}" -O "${TMPDIR}/${INSTALL_EXE_VN}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_VN}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_VN}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_VN}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_pbe() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_PBE}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_PBE}" -O "${TMPDIR}/${INSTALL_EXE_PBE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_PBE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_PBE}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_PBE}" 2>/dev/null
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    rm "${progReg}" 2>/dev/null
  fi
}

function install_dxvk_stable() {
build=$(wget -qO- https://github.com/doitsujin/dxvk/releases | sed 's|<| |g' | grep Version | awk '{print $3}' | head -n1)

for dll in 32 64
do
wget -qO- https://github.com/doitsujin/dxvk/releases/download/v${build}/dxvk-${build}.tar.gz | tar xvz dxvk-${build}/x${dll}/{d3d9.dll,d3d11.dll}
done

for dll in d3d9.dll d3d11.dll
do
cp dxvk-${build}/x32/$dll "${WINEPREFIX}/drive_c/windows/syswow64/"
cp dxvk-${build}/x64/$dll "${WINEPREFIX}/drive_c/windows/system32/"
done

rm -rf dxvk-${build}

cat > ${XDG_CACHE_HOME}/dxvk.reg <<'EOF'
Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Wine\DllOverrides]
"*d3d9"="native"
"*d3d11"="native"
EOF
# Apply dlloverride reg
env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" start regedit ${XDG_CACHE_HOME}/dxvk.reg
sleep 1
rm "${XDG_CACHE_HOME}/dxvk.reg"

notify-send --icon "${SNAP}/meta/gui/leagueoflegends.png" --expire-time=15000 "League of legends" "Installation of DXVK stable is done now run snap again to install game or Your can copy over your game from somewhere else to $WINEPREFIX/drive_c" 
}

function install_dxvk_master() {
curbuild=$(wget -qO- https://git.froggi.es/doitsujin/dxvk/-/jobs | grep 'success' | sed 's|/| |g;s|"| |g' | awk '{print $15}' | head -n1)
wget --content-disposition -nv -c https://git.froggi.es/doitsujin/dxvk/-/jobs/${curbuild}/artifacts/download -P "${XDG_CACHE_HOME}/downloads"
for dll in d3d9.dll d3d11.dll
do
unzip -jo "${XDG_CACHE_HOME}/downloads/*.zip" "build/dxvk-release/x32/$dll" -d "${WINEPREFIX}/drive_c/windows/syswow64/"
unzip -jo "${XDG_CACHE_HOME}/downloads/*.zip" "build/dxvk-release/x64/$dll" -d "${WINEPREFIX}/drive_c/windows/system32/"
done

cat > ${XDG_CACHE_HOME}/downloads/dxvk.reg <<'EOF'
Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Wine\DllOverrides]
"*d3d9"="native"
"*d3d11"="native"
EOF

# Apply dlloverride reg
env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" start regedit ${XDG_CACHE_HOME}/downloads/dxvk.reg
sleep 1
rm -r "${XDG_CACHE_HOME}/downloads"

notify-send --icon "${SNAP}/meta/gui/leagueoflegends.png" --expire-time=15000 "League of legends" "Installation of DXVK master is done now run snap again to install game or Your can copy over your game from somewhere else to $WINEPREFIX/drive_c" 
}

function install_blitz_gg() {

wget --content-disposition -nv -c https://dl.blitz.gg/download/windows -P "${XDG_CACHE_HOME}/downloads"

bver=$(ls ${XDG_CACHE_HOME}/downloads | grep exe | sed 's|-| |g' | awk '{print $3}')

"${WINETRICKS}" --force --unattended dotnet452 win7

"${WINELOADER}" "${XDG_CACHE_HOME}/downloads/Blitz-Setup-${bver}-ia32.exe"

sleep 1
rm -r "${XDG_CACHE_HOME}/downloads" && rm -r "${XDG_CACHE_HOME}/winetricks"

notify-send --icon "${SNAP}/meta/gui/leagueoflegends.png" --expire-time=15000 "League of legends" "Installation of Blitz.gg is done now to run this tool launch it via this command leagueoflegends.blitzgg"
}

  action=$(yad --width 400 --entry --title "League of Legends" \
      --center \
      --button="Install:0" --button="Exit:1" \
      --text "Select Game Installer Region" \
      --entry-text \
      "NA" "EUW" "EUNE" "BR" "JP" "KR" "LAN" "LAS" "OCE" "PH" "RU" "SG" "TR" "TW" "VN")
  ret=$?

  [[ $ret -eq 1 ]] && exit 0

  case $action in
      NA*) cmd=$(install_na) ;;
      EUW*) cmd=$(install_euw) ;;
      EUNE*) cmd=$(install_eune) ;;
      BR*) cmd=$(install_br) ;;
      JP*) cmd=$(install_jp) ;;
      KR*) cmd=$(install_kr) ;;
      LAN*) cmd=$(install_lan) ;;
      LAS*) cmd=$(install_las) ;;
      OCE*) cmd=$(install_oce) ;;
      PH*) cmd=$(install_ph) ;;
      RU*) cmd=$(install_ru) ;;
      SG*) cmd=$(install_sg) ;;
      TR*) cmd=$(install_tr) ;;
      TW*) cmd=$(install_tw) ;;
      VN*) cmd=$(install_vn) ;;
#       PBE*) cmd=$(install_pbe) ;;
#       DXVK_S*) cmd=$(install_dxvk_stable) ;;
#       DXVK_M*) cmd=$(install_dxvk_master) ;;
#       BLITZ_GG*) cmd=$(install_blitz_gg) ;;
      *) exit 1 ;;
  esac

  eval $cmd 2>/dev/null
}

function launch_app() {

  # Remove dxvk dlloverrides if it exists
#   if [[ $(grep -c *d3d9 "$WINEPREFIX/user.reg") -eq 1 ]]; then
#     sed -i '/"*d3d9"="native"/d;/"*d3d10"="native"/d;/"*d3d10_1"="native"/d;/"*d3d10core"="native"/d;/"*d3d11"="native"/d;/"*dxgi"="native"/d' "$WINEPREFIX/user.reg"
#   fi

  # Add dxvk dlloverrides for client ux renderers
#   if [[ $(grep -c "LeagueClientUx.exe" "$WINEPREFIX/user.reg") -eq 0 ]]; then
#    "${WINELOADER}" reg add "HKCU\\Software\\Wine\\AppDefaults\\LeagueClientUx.exe\\DllOverrides" /t REG_SZ /v d3d9 /d native,builtin
#    "${WINELOADER}" reg add "HKCU\\Software\\Wine\\AppDefaults\\LeagueClientUx.exe\\DllOverrides" /t REG_SZ /v d3d11 /d native,builtin
#    "${WINELOADER}" reg add "HKCU\\Software\\Wine\\AppDefaults\\LeagueClientUxRender.exe\\DllOverrides" /t REG_SZ /v d3d9 /d native,builtin
#    "${WINELOADER}" reg add "HKCU\\Software\\Wine\\AppDefaults\\LeagueClientUxRender.exe\\DllOverrides" /t REG_SZ /v d3d11 /d native,builtin
#    "${WINELOADER}" reg add "HKCU\\Software\\Wine\\AppDefaults\\League of Legends.exe\\DllOverrides" /t REG_SZ /v d3d9 /d native,builtin
#    "${WINELOADER}" reg add "HKCU\\Software\\Wine\\AppDefaults\\League of Legends.exe\\DllOverrides" /t REG_SZ /v d3d11 /d native,builtin
#   fi

  # If we don't change into the program directory some assets may not be found
  cd "${WINE_DIR}"

  # pre launching script for login fix
#   lolfix &

  if [[ $(basename "$WINE_EXE") = "RiotClientServices.exe" ]]; then
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${WINE_EXE}" --launch-product=league_of_legends --launch-patchline=live
  else
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${WINE_EXE}"
  fi
}

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

# Get the executable we're being asked to launch
if [ -n "${1}" ]; then
  WINE_EXE="${1}"
  WINE_DIR=$(dirname "${WINE_EXE}")
fi

# If we've been given and installer URL derive the filename
if [ -n "${INSTALL_URL_NA}" ]; then
  INSTALL_EXE_NA=$(basename "${INSTALL_URL_NA}")
fi

if [ -n "${INSTALL_URL_EUW}" ]; then
  INSTALL_EXE_EUW=$(basename "${INSTALL_URL_EUW}")
fi

if [ -n "${INSTALL_URL_EUNE}" ]; then
  INSTALL_EXE_EUNE=$(basename "${INSTALL_URL_EUNE}")
fi

if [ -n "${INSTALL_URL_BR}" ]; then
  INSTALL_EXE_BR=$(basename "${INSTALL_URL_BR}")
fi

if [ -n "${INSTALL_URL_JP}" ]; then
  INSTALL_EXE_JP=$(basename "${INSTALL_URL_JP}")
fi

if [ -n "${INSTALL_URL_KR}" ]; then
  INSTALL_EXE_KR=$(basename "${INSTALL_URL_KR}")
fi

if [ -n "${INSTALL_URL_LAN}" ]; then
  INSTALL_EXE_LAN=$(basename "${INSTALL_URL_LAN}")
fi

if [ -n "${INSTALL_URL_LAS}" ]; then
  INSTALL_EXE_LAS=$(basename "${INSTALL_URL_LAS}")
fi

if [ -n "${INSTALL_URL_OCE}" ]; then
  INSTALL_EXE_OCE=$(basename "${INSTALL_URL_OCE}")
fi

if [ -n "${INSTALL_URL_PH}" ]; then
  INSTALL_EXE_PH=$(basename "${INSTALL_URL_PH}")
fi

if [ -n "${INSTALL_URL_RU}" ]; then
  INSTALL_EXE_RU=$(basename "${INSTALL_URL_RU}")
fi

if [ -n "${INSTALL_URL_SG}" ]; then
  INSTALL_EXE_SG=$(basename "${INSTALL_URL_SG}")
fi

if [ -n "${INSTALL_URL_TR}" ]; then
  INSTALL_EXE_TR=$(basename "${INSTALL_URL_TR}")
fi

if [ -n "${INSTALL_URL_TW}" ]; then
  INSTALL_EXE_TW=$(basename "${INSTALL_URL_TW}")
fi

if [ -n "${INSTALL_URL_VN}" ]; then
  INSTALL_EXE_VN=$(basename "${INSTALL_URL_VN}")
fi

if [ -n "${INSTALL_URL_PBE}" ]; then
  INSTALL_EXE_PBE=$(basename "${INSTALL_URL_PBE}")
fi

# ensure_dir_exists calls `mkdir -p` if the given path is not a directory.
# This speeds up execution time by avoiding unnecessary calls to mkdir.
#
# Usage: ensure_dir_exists <path> [<mkdir-options>]...
#
function ensure_dir_exists() {
  [ -d "$1" ] ||  mkdir -p "$@"
}

# On Fedora $SNAP is under /var and there is some magic to map it to /snap.
# # We need to handle that case and reset $SNAP
SNAP=`echo $SNAP | sed -e "s|/var/lib/snapd||g"`

export GTK_MODULES=""

if [ "$SNAP_ARCH" = "amd64" ]; then
  export WINEARCH=${WINEARCH:-"win64"}
  export ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" = "i386" ]; then
  export WINEARCH=win32
  export ARCH="i386-linux-gnu"
else
  echo "Host architecture ($SNAP_ARCH) unsupported."
  exit 1
fi

if [ -n "${DLLOVERRIDES}" ]; then
  export WINEDLLOVERRIDES="${DLLOVERRIDES}"
fi

export WINEVERPATH=$WINE_BASE
export WINESERVER=$WINE_BASE/bin/wineserver
export WINELOADER=$WINE_BASE/bin/wine
export WINEDLLPATH=$WINE_BASE/lib/wine/fakedlls
export WINETRICKS=$WPR/bin/winetricks
export WINEPREFIX="$SNAP_USER_COMMON/.wine"
export WINEDEBUG=${WINEDEBUG:-"fixme-all"}
export WINEFSYNC=${WINEFSYNC:-"1"}
export LD_LIBRARY_PATH="$WPR/lib:$WPR/lib/$ARCH:$WPR/usr/lib:$WPR/usr/lib/$ARCH:$LD_LIBRARY_PATH"
export PATH=$PATH:$WPR/bin:$WPR/usr/bin:$WINE_BASE/bin

# DXVK env
export DXVK_HUD=${DXVK_HUD:-"0"}
export DXVK_LOG_LEVEL=${DXVK_LOG_LEVEL:-"none"}
export DXVK_STATE_CACHE=${DXVK_STATE_CACHE:-"0"}

if [ "$SNAP_ARCH" = "amd64" ]; then
  append_dir LD_LIBRARY_PATH $WPR/lib64
  append_dir LD_LIBRARY_PATH $WPR/lib/i386-linux-gnu
  append_dir LD_LIBRARY_PATH $WPR/usr/lib/i386-linux-gnu
fi

# XKB config
export XKB_CONFIG_ROOT=$WPR/usr/share/X11/xkb

# Give XOpenIM a chance to locate locale data.
# This is required for text input to work in SDL2 games.
export XLOCALEDIR=$WPR/usr/share/X11/locale
export LOCPATH=$WPR/usr/lib/locale

# Set XCursors path
export XCURSOR_PATH=$WPR/usr/share/icons
prepend_dir XCURSOR_PATH $SNAP/data-dir/icons

# SAMBA Libs for ntlm_auth to function
append_dir LD_LIBRARY_PATH $WPR/usr/lib/$ARCH/samba
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WPR/usr/lib/i386-linux-gnu/samba

# Mesa Libs for OpenGL support
append_dir LD_LIBRARY_PATH $WPR/usr/lib/$ARCH/mesa
append_dir LD_LIBRARY_PATH $WPR/usr/lib/$ARCH/mesa-egl
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WPR/usr/lib/i386-linux-gnu/mesa
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WPR/usr/lib/i386-linux-gnu/mesa-egl

# Tell libGL and libva where to find the drivers
export LIBGL_DRIVERS_PATH=$WPR/usr/lib/$ARCH/dri
[ "$SNAP_ARCH" = "amd64" ] && append_dir LIBGL_DRIVERS_PATH $WPR/usr/lib/i386-linux-gnu/dri
append_dir LD_LIBRARY_PATH $LIBGL_DRIVERS_PATH
export LIBVA_DRIVERS_PATH=$WPR/usr/lib/$ARCH/dri
[ "$SNAP_ARCH" = "amd64" ] && append_dir LIBVA_DRIVERS_PATH $WPR/usr/lib/i386-linux-gnu/dri

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
append_dir LD_LIBRARY_PATH /var/lib/snapd/lib/gl

# Pulseaudio export
append_dir LD_LIBRARY_PATH $WPR/usr/lib/$ARCH/pulseaudio
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WPR/usr/lib/i386-linux-gnu/pulseaudio

# Alsa export
export ALSA_CONFIG_PATH="$WPR/usr/share/alsa/alsa.conf"

# EGL vendor files on glvnd enabled systems
[ -d /var/lib/snapd/lib/glvnd/egl_vendor.d ] && \
append_dir __EGL_VENDOR_LIBRARY_DIRS /var/lib/snapd/lib/glvnd/egl_vendor.d

# Tell GStreamer where to find its plugins
export GST_PLUGIN_PATH=$WPR/usr/lib/$ARCH/gstreamer-1.0
export GST_PLUGIN_SYSTEM_PATH=$WPR/usr/lib/$ARCH/gstreamer-1.0
# gst plugin scanner doesn't install in the correct path: https://github.com/ubuntu/snapcraft-desktop-helpers/issues/43
export GST_PLUGIN_SCANNER=$WPR/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner

# XDG Config
prepend_dir XDG_CONFIG_DIRS $WPR/etc/xdg

# Define snaps' own data dir
prepend_dir XDG_DATA_DIRS $SNAP/share
prepend_dir XDG_DATA_DIRS $WPR/usr/share
prepend_dir XDG_DATA_DIRS $SNAP_USER_COMMON
prepend_dir XDG_DATA_DIRS $SNAP_USER_DATA

export HOME=$SNAP_USER_COMMON

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_COMMON/.local/share
ensure_dir_exists $XDG_DATA_HOME

# Workaround for GLib < 2.53.2 not searching for schemas in $XDG_DATA_HOME:
#   https://bugzilla.gnome.org/show_bug.cgi?id=741335
prepend_dir XDG_DATA_DIRS $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_COMMON/.cache
ensure_dir_exists $XDG_CACHE_HOME

# Set config folder to local path
export XDG_CONFIG_HOME=$SNAP_USER_COMMON/.config
ensure_dir_exists $XDG_CONFIG_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && ensure_dir_exists $XDG_RUNTIME_DIR -m 700

# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

# Font Config and themes
export FONTCONFIG_PATH=$WPR/etc/fonts
export FONTCONFIG_FILE=$WPR/etc/fonts/fonts.conf

function make_user_fontconfig {
  echo "<fontconfig>"
  if [ -d $REALHOME/.local/share/fonts ]; then
    echo "  <dir>$REALHOME/.local/share/fonts</dir>"
  fi
  if [ -d $REALHOME/.fonts ]; then
    echo "  <dir>$REALHOME/.fonts</dir>"
  fi
  for ((i = 0; i < ${#data_dirs_array[@]}; i++)); do
    if [ -d "${data_dirs_array[$i]}/fonts" ]; then
      echo "  <dir>${data_dirs_array[$i]}/fonts</dir>"
    fi
  done
  echo '  <include ignore_missing="yes">conf.d</include>'
  # We need to include this default cachedir first so that caching
  # works: without it, fontconfig will try to write to the real user home
  # cachedir and be blocked by AppArmor.
  echo '  <cachedir prefix="xdg">fontconfig</cachedir>'
  if [ -d $REALHOME/.cache/fontconfig ]; then
    echo "  <cachedir>$REALHOME/.cache/fontconfig</cachedir>"
  fi
  echo "</fontconfig>"
}

if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/{fontconfig,fonts,fonts-*,themes,.themes}

  # This fontconfig fragment is installed in a location that is
  # included by the system fontconfig configuration: namely the
  # etc/fonts/conf.d/50-user.conf file.
  ensure_dir_exists $XDG_CONFIG_HOME/fontconfig
  async_exec make_user_fontconfig > $XDG_CONFIG_HOME/fontconfig/fonts.conf

  # the themes symlink are needed for GTK 3.18 when the prefix isn't changed
  # GTK 3.20 looks into XDG_DATA_DIR which has connected themes.
  if [ -d $SNAP/data-dir/themes ]; then
    ln -sf $SNAP/data-dir/themes $XDG_DATA_HOME
    ln -sfn $SNAP/data-dir/themes $SNAP_USER_DATA/.themes
  else
    ln -sf $WPR/usr/share/themes $XDG_DATA_HOME
    ln -sfn $WPR/usr/share/themes $SNAP_USER_DATA/.themes
  fi
fi

# Build mime.cache
# needed for gtk and qt icon
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/mime
  if [ ! -f $WPR/usr/share/mime/mime.cache ]; then
    if command -v update-mime-database >/dev/null; then
      cp --preserve=timestamps -dR $WPR/usr/share/mime $XDG_DATA_HOME
      async_exec update-mime-database $XDG_DATA_HOME/mime
    fi
  fi
fi

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE=$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache
export GDK_PIXBUF_MODULEDIR=$WPR/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders
if [ $needs_update = true ]; then
  rm -f $GDK_PIXBUF_MODULE_FILE
  if [ -f $WPR/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders ] && [ ! -f "${GDK_PIXBUF_MODULE_FILE}" ]; then
    async_exec $WPR/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders > $GDK_PIXBUF_MODULE_FILE
  fi
fi

# GTK theme and behavior modifier
# Those can impact the theme engine used by Qt as well
gtk_configs=(gtk-3.0/settings.ini gtk-3.0/bookmarks gtk-2.0/gtkfilechooser.ini)
for f in ${gtk_configs[@]}; do
  dest="$XDG_CONFIG_HOME/$f"
  if [ ! -L "$dest" ]; then
    ensure_dir_exists `dirname $dest`
    ln -s $REALHOME/.config/$f $dest
  fi
done

if [ ! -d $WINEPREFIX ]; then
# link ttf & ttc fonts from root to wineprefix
ensure_dir_exists $WINEPREFIX/drive_c/windows/Fonts
find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" $WINEPREFIX/drive_c/windows/Fonts/ \; &>/dev/null
fi

# Stop wine from updating $WINEPREFIX automatically
if [ -f "${WINEPREFIX}/.update-timestamp" ]; then
  chkstmp=$(grep disable "${WINEPREFIX}/.update-timestamp" | wc -l)
  if [[ $chkstmp -eq 0 ]]; then
    echo "disable" > "${WINEPREFIX}/.update-timestamp"
  fi
fi

# Initialise wine
if [ ! -f "${WINEPREFIX}/drive_c/windows/system.ini" ]; then
  # Create the WINE environment
  env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" wineboot --init 2>&1 | \
  yad --progress --title="Preparing Windows environment" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate
  # Opt out of winetricks metrics - we ninja this to avoid dialogs
  if [ ! -f "${XDG_CACHE_HOME}/winetricks/track_usage" ]; then
    ensure_dir_exists "${XDG_CACHE_HOME}/winetricks"
    echo 0 > "${XDG_CACHE_HOME}/winetricks/track_usage"
  fi
else
  # Notification
  notify-send --icon "${SNAP}/meta/gui/leagueoflegends.png" --expire-time=15000 "${TITLE}" "${NOTICE}"
fi

# Suppress winemenubuilder error
if [ ! -f "${WINEPREFIX}/drive_c/windows/system32/winemenubuilder.exe" ]; then
  # Create dummy winemenubuilder.exe
  touch "${WINEPREFIX}/drive_c/windows/system32/winemenubuilder.exe"
fi

[ $needs_update = true ] && echo "SNAP_DESKTOP_LAST_REVISION=$SNAP_REVISION" > $SNAP_USER_DATA/.last_revision

wait_for_async_execs


if [ "$SNAP_ARCH" = "amd64" ]; then
# check for lol patch
if [ -f $WINE_BASE/bin/nlpfile ]; then
        platform_snap_name="$(
            grep \
                --extended-regexp \
                'default-provider: *wine-platform-[[:digit:]]' \
                $SNAP/meta/snap.yaml \
                | cut --delimiter=: --fields=2 \
                | sed 's/^ *//' \
                || true
          )"

        clear
        echo ""
        echo "You need to update ${platform_snap_name} snap."
        echo ""
        echo "Which has league patched wine-staging"
        echo ""
        echo "You can do this with command:"
        echo "snap refresh --candidate ${platform_snap_name}"
        echo ""

action=$(yad --borders=6 --fixed --center --text-align=left --title "Warning!!!" --button="OK:1" \
      --text "You need to update ${platform_snap_name} snap which has league patched wine-staging.
And it is required since riot messed it with a update broke game in linux.

Run this command in terminal, in order to play:

snap refresh --candidate ${platform_snap_name}" --selectable-labels)
  ret=$?

  [[ $ret -eq 1 ]] && exit 0

  case $action in
      *) exit 1 ;;
  esac

  eval $cmd 2>/dev/null
fi

fi

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it otherwise install it then lauch it.
if [[ ${WINE_EXE} = *"glxinfo"* ]] || [[ ${WINE_EXE} = *"glxheads"* ]] || [[ ${WINE_EXE} = *"vulkaninfo"* ]] || [[ ${WINE_EXE} = *"vkcube"* ]]; then
  "$@"
elif [[ ${WINE_EXE} = *"winecfg"* ]] || [[ ${WINE_EXE} = *"wineboot"* ]] || [[ ${WINE_EXE} = *"winetricks"* ]] || [[ ${WINE_EXE} = *"regedit"* ]]; then
  env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "$@"
elif [[ ${WINE_EXE} = *"wineserver"* ]]; then
  env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINE_EXE}" "-k"
elif [ -e "${WINE_EXE}" ]; then
  launch_app
elif [[ ${WINE_EXE} = *"install"* ]]; then
  install_app
else
  install_app
fi
